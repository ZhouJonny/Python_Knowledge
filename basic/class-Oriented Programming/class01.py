"""
指令式编程 ---> 面向过程（函数）编程 ---> 程序比较简单的时候没有任何毛病
编程范式（程序设计的方法论）：面向对象编程/函数式编程

对象：对象是可以接收消息的实体，面向对象编程就是通过给对象发消息达到解决问题的目标
对象 = 数据 + 函数（方法）---> 对象将数据和操作数据的函数从逻辑上变成了一个整体
- 一切皆为对象
- 对象都有属性和行为
- 每个对象都是独一无二的
- 对象一定属于某个类

类（类型）：将有共同的特征（静态特征和动态特征）的对象的共同特征抽取出来之后得到的一个抽象概念。
简单说，类就是对象的模版，有了类才能创建这种类型的对象。

面对对象编程的四大支柱：
    - 抽象（abstraction）：提取共性（定义类就是一个抽象过程，需要做数据抽象和行为抽象）
    - 封装（encapsulation）：把数据和操作数据的函数从逻辑上组装成一个整体（对象）
        ---> 隐藏实现细节，暴露简单的调用接口（创建对象，调用方法）
    - 继承（inheritance）：拓展已经有的类，创建新类，实现对已有类的代码复用。
    - 多态（polymorphism）：给不同的对象发出同样的消息，不同的对象执行了不同的行为。
        ---> 子类对父类已有的方法，重新给出自己的实现版本，这个过程叫方法重写（override）。
        ---> 在重写方法的过程中，不同的子类可以对父类的同一个方法给出不同的实现版本，那么该方法在运行时就会表现出多态性。

面向对象编程：
    1。定义类 ---> 类的命名使用驼峰命名法
        - 数据抽象：找到和对象相关的静态特征（属性）---> 找名词
        - 行为抽象：找到和对象相关的动态特征（方法）---> 找动词
            写在类里面的函数通常不叫函数，而是称为方法
    2。造对象
    3。发消息
"""


class Student:
    """学生"""
    # self指的是接收消息的学生对象

    # 数据抽象（属性）
    def __init__(self, name, age):
        self.name = name  # 等号右边的name是（）里的name，将数据绑定
        self.age = age

    # 行为抽象（方法）
    def eat(self):
        """吃饭"""
        print(f'{self.name} is eating')

    def study(self, course_name):
        """学习"""
        print(f'{self.name} is studying {course_name}')

    def age_xx(self):
        """年龄"""
        if self.age < 18:
            print(f'{self.name} is not 18 years old')
        else:
            print(f'{self.name} is 18 years old ')
